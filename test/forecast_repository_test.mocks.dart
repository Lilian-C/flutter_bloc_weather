// Mocks generated by Mockito 5.2.0 from annotations
// in flutter_weather_app/test/forecast_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:connectivity_plus/connectivity_plus.dart' as _i7;
import 'package:flutter_weather_app/src/helpers/connection.helper.dart' as _i3;
import 'package:flutter_weather_app/src/models/response.model.dart' as _i4;
import 'package:flutter_weather_app/src/repositories/sources/network/forecast.service.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

import 'forecast_repository_test.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeForecastService_0 extends _i1.Fake implements _i2.ForecastService {}

class _FakeConnectionHelper_1 extends _i1.Fake implements _i3.ConnectionHelper {
}

class _FakeResponseModel_2 extends _i1.Fake implements _i4.ResponseModel {}

/// A class which mocks [MockForecastRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockForecastRepository extends _i1.Mock
    implements _i5.MockForecastRepository {
  MockMockForecastRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ForecastService get api => (super.noSuchMethod(Invocation.getter(#api),
      returnValue: _FakeForecastService_0()) as _i2.ForecastService);
  @override
  _i3.ConnectionHelper get connectionHelper =>
      (super.noSuchMethod(Invocation.getter(#connectionHelper),
          returnValue: _FakeConnectionHelper_1()) as _i3.ConnectionHelper);
  @override
  _i6.Future<_i4.ResponseModel> fetchFiveDayForecast(String? city) =>
      (super.noSuchMethod(Invocation.method(#fetchFiveDayForecast, [city]),
              returnValue:
                  Future<_i4.ResponseModel>.value(_FakeResponseModel_2()))
          as _i6.Future<_i4.ResponseModel>);
}

/// A class which mocks [MockForecastService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockForecastService extends _i1.Mock
    implements _i5.MockForecastService {
  MockMockForecastService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i4.ResponseModel> getForecast(String? city) =>
      (super.noSuchMethod(Invocation.method(#getForecast, [city]),
              returnValue:
                  Future<_i4.ResponseModel>.value(_FakeResponseModel_2()))
          as _i6.Future<_i4.ResponseModel>);
}

/// A class which mocks [MockConnectionHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockConnectionHelper extends _i1.Mock
    implements _i5.MockConnectionHelper {
  MockMockConnectionHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<bool> hasConnection() =>
      (super.noSuchMethod(Invocation.method(#hasConnection, []),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  _i6.Stream<_i7.ConnectivityResult> connectionListener() =>
      (super.noSuchMethod(Invocation.method(#connectionListener, []),
              returnValue: Stream<_i7.ConnectivityResult>.empty())
          as _i6.Stream<_i7.ConnectivityResult>);
}
